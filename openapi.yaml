openapi: 3.0.3
info:
  title: YubiApp API
  version: 1.0.0
  description: API for managing users, roles, permissions, resources, and YubiKey devices with device-based authentication.

servers:
  - url: http://localhost:8080/api/v1

components:
  securitySchemes:
    DeviceAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        Device-based authentication. Example: `yubikey:<otp>`, `totp:<code>`, etc.
        Required for all write operations (POST, PUT, DELETE).
    SessionAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Session-based authentication using JWT access tokens.
        Include the access token in the Authorization header as "Bearer <token>".
        Only allowed for read operations (GET methods).

  schemas:
    Session:
      type: object
      properties:
        id: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        device_id: { type: string, format: uuid }
        access_count: { type: integer }
        refresh_count: { type: integer }
        created_at: { type: string, format: date-time }
        expires_at: { type: string, format: date-time }
        is_valid: { type: boolean }
    
    SessionResponse:
      type: object
      properties:
        authenticated: { type: boolean }
        session_id: { type: string, format: uuid }
        access_token: { type: string }
        refresh_token: { type: string }
        user: { $ref: '#/components/schemas/User' }
        device: { $ref: '#/components/schemas/Device' }
    
    RefreshResponse:
      type: object
      properties:
        session_id: { type: string, format: uuid }
        access_token: { type: string }
        refresh_token: { type: string }

    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string }
        username: { type: string }
        first_name: { type: string }
        last_name: { type: string }
        active: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    Resource:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        type: { type: string }
        location: { type: string }
        department: { type: string }
        active: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Permission:
      type: object
      properties:
        id: { type: string, format: uuid }
        resource:
          $ref: '#/components/schemas/Resource'
        action: { type: string }
        effect: { type: string }
        created_at: { type: string, format: date-time }
    Action:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        activity_type: 
          type: string
          enum: [user, system, automated, other]
          description: Type of activity this action represents
        required_permissions:
          type: array
          items: { type: string }
          description: Array of permission strings in format "resource:action"
        details:
          type: object
          description: JSON object containing additional details about the action
        active: { type: boolean, description: Whether the action is active and can be executed }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Device:
      type: object
      properties:
        id: { type: string, format: uuid }
        user:
          $ref: '#/components/schemas/User'
        type: { type: string }
        identifier: { type: string }
        active: { type: boolean }
        verified_at: { type: string, format: date-time }
        last_used_at: { type: string, format: date-time }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Location:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string }
        address: { type: string }
        type: { type: string, enum: [office, home, event, other] }
        active: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    UserStatus:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string }
        type: { type: string, enum: [working, break, leave, travel, other] }
        active: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    UserActivityHistory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        action:
          $ref: '#/components/schemas/Action'
        from_datetime:
          type: string
          format: date-time
        to_datetime:
          type: string
          format: date-time
          nullable: true
        location:
          $ref: '#/components/schemas/Location'
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
          nullable: true
        details:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserActivitySummary:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        user_name:
          type: string
        total_hours:
          type: number
          format: float
        break_hours:
          type: number
          format: float
        work_hours:
          type: number
          format: float
        meeting_hours:
          type: number
          format: float
        sign_ins:
          type: integer
        sign_outs:
          type: integer

security:
  - DeviceAuth: []

paths:
  /auth/device:
    post:
      summary: Authenticate using a device (YubiKey, TOTP, etc.)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                device_type: { type: string }
                auth_code: { type: string }
                permission: 
                  type: string
                  description: |
                    Optional permission to check. Can be either:
                    - Resource:action format (e.g., "yubiapp:read")
                    - Permission UUID (e.g., "123e4567-e89b-12d3-a456-426614174000")
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated: { type: boolean }
                  user: { $ref: '#/components/schemas/User' }
        '401':
          description: Authentication failed

  /auth/session:
    post:
      summary: Create a new session using device authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - device_type
                - auth_code
              properties:
                device_type: { type: string }
                auth_code: { type: string }
                permission: 
                  type: string
                  description: |
                    Optional permission to check. Can be either:
                    - Resource:action format (e.g., "yubiapp:read")
                    - Permission UUID (e.g., "123e4567-e89b-12d3-a456-426614174000")
                nonce: { type: string }
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          description: Authentication failed
        '500':
          description: Failed to create session

  /auth/session/refresh/{session_id}:
    post:
      summary: Refresh session tokens
      parameters:
        - name: session_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: Session ID to refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token: { type: string }
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '400':
          description: Invalid request or session ID mismatch
        '401':
          description: Invalid refresh token or session not found

  /auth/action/{action_name}:
    post:
      summary: Perform an action with device-based authentication
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: action_name
          in: path
          required: true
          schema: { type: string }
          description: Name of the action to perform (e.g., "ssh-login", "app-install")
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Action-specific data (structure varies by action)
              example:
                resource: "aws-cloud-west/server101"
                login: "support"
      responses:
        '200':
          description: Action performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  action: { type: string }
                  user_id: { type: string, format: uuid }
                  success: { type: boolean }
                  message: { type: string }
        '401':
          description: Authentication failed
        '403':
          description: Permission denied
        '404':
          description: Action not found

  /devices/register:
    post:
      summary: Register a device to a user
      security: [ { DeviceAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - target_user_id
                - device_identifier
                - device_type
              properties:
                target_user_id:
                  type: string
                  description: UUID or email of the target user
                  example: "john.doe@example.com"
                device_identifier:
                  type: string
                  description: Device identifier (e.g., YubiKey public ID)
                  example: "cccccbvjbvdbijlrttlkfugllrrutgighrlnuibkbllj"
                device_type:
                  type: string
                  enum: [yubikey, totp, sms, email]
                  description: Type of device being registered
                  example: "yubikey"
                notes:
                  type: string
                  description: Optional notes about the registration
                  example: "New YubiKey for John"
      responses:
        '200':
          description: Device registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  registration:
                    type: object
                    properties:
                      id: { type: string, format: uuid }
                      device_id: { type: string, format: uuid }
                      registrar:
                        type: object
                        properties:
                          id: { type: string, format: uuid }
                          email: { type: string }
                      target_user_id: { type: string, format: uuid }
                      action_type: { type: string }
                      created_at: { type: string, format: date-time }
        '401':
          description: Authentication failed
        '403':
          description: Permission denied (requires yubiapp:register-other)
        '400':
          description: Invalid request body
        '404':
          description: Target user not found

  /devices/{device_id}/deregister:
    post:
      summary: Deregister a device from its current user
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: device_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: ID of the device to deregister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: string
                  enum: [user_left, device_lost, device_transfer, administrative]
                  description: Reason for deregistration
                  example: "user_left"
                notes:
                  type: string
                  description: Optional notes about the deregistration
                  example: "User left the organization"
      responses:
        '200':
          description: Device deregistered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  deregistration:
                    type: object
                    properties:
                      id: { type: string, format: uuid }
                      device_id: { type: string, format: uuid }
                      registrar:
                        type: object
                        properties:
                          id: { type: string, format: uuid }
                          email: { type: string }
                      action_type: { type: string }
                      reason: { type: string }
                      created_at: { type: string, format: date-time }
        '401':
          description: Authentication failed
        '403':
          description: Permission denied (requires yubiapp:deregister-other)
        '400':
          description: Invalid request body
        '404':
          description: Device not found

  /devices/{device_id}/transfer:
    post:
      summary: Transfer a device from one user to another
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: device_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: ID of the device to transfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - target_user_id
              properties:
                target_user_id:
                  type: string
                  description: UUID or email of the target user
                  example: "jane.doe@example.com"
                notes:
                  type: string
                  description: Optional notes about the transfer
                  example: "Transferring device to Jane"
      responses:
        '200':
          description: Device transferred successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  message: { type: string }
                  transfer:
                    type: object
                    properties:
                      id: { type: string, format: uuid }
                      device_id: { type: string, format: uuid }
                      registrar:
                        type: object
                        properties:
                          id: { type: string, format: uuid }
                          email: { type: string }
                      target_user_id: { type: string, format: uuid }
                      action_type: { type: string }
                      created_at: { type: string, format: date-time }
        '401':
          description: Authentication failed
        '403':
          description: Permission denied (requires both yubiapp:register-other and yubiapp:deregister-other)
        '400':
          description: Invalid request body
        '404':
          description: Device or target user not found

  /devices/{device_id}/history:
    get:
      summary: Get device registration history
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: device_id
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: ID of the device to get history for
      responses:
        '200':
          description: Device history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  device_id: { type: string, format: uuid }
                  history:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        action_type: { type: string }
                        registrar:
                          type: object
                          properties:
                            id: { type: string, format: uuid }
                            email: { type: string }
                        target_user:
                          type: object
                          properties:
                            id: { type: string, format: uuid }
                            email: { type: string }
                        reason: { type: string }
                        notes: { type: string }
                        ip_address: { type: string }
                        created_at: { type: string, format: date-time }
        '401':
          description: Authentication failed
        '404':
          description: Device not found

  /users:
    get:
      summary: List users
      description: |
        Supports both device-based and session-based authentication.
        - Device auth: `Authorization: yubikey:<otp>`
        - Session auth: `Authorization: Bearer <access_token>`
      security: 
        - DeviceAuth: []
        - SessionAuth: []
      parameters:
        - name: active
          in: query
          required: false
          schema: { type: boolean }
          description: Filter to show only active users when set to true
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
                  total: { type: integer }
        '401':
          description: Authentication failed
        '403':
          description: Permission denied
    post:
      summary: Create a user
      description: |
        Requires device-based authentication only.
        Session-based authentication is not allowed for write operations.
      security: [ { DeviceAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, username, password]
              properties:
                email: { type: string }
                username: { type: string }
                password: { type: string }
                first_name: { type: string }
                last_name: { type: string }
                active: { type: boolean }
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401':
          description: Authentication failed
        '403':
          description: Permission denied or session auth not allowed

  /users/{id}:
    get:
      summary: Get user by ID
      description: |
        Supports both device-based and session-based authentication.
        - Device auth: `Authorization: yubikey:<otp>`
        - Session auth: `Authorization: Bearer <access_token>`
      security: 
        - DeviceAuth: []
        - SessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401':
          description: Authentication failed
        '404':
          description: User not found
    put:
      summary: Update user
      description: |
        Requires device-based authentication only.
        Session-based authentication is not allowed for write operations.
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                username: { type: string }
                password: { type: string }
                first_name: { type: string }
                last_name: { type: string }
                active: { type: boolean }
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401':
          description: Authentication failed
        '403':
          description: Permission denied or session auth not allowed
    delete:
      summary: Delete user
      description: |
        Requires device-based authentication only.
        Session-based authentication is not allowed for write operations.
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: User deleted
        '401':
          description: Authentication failed
        '403':
          description: Permission denied or session auth not allowed

  /user-roles/{user_id}/{role_id}:
    post:
      summary: Assign user to role
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: role_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: User assigned to role
    delete:
      summary: Remove user from role
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: role_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: User removed from role

  /roles:
    get:
      summary: List roles
      security: [ { DeviceAuth: [] } ]
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items: { $ref: '#/components/schemas/Role' }
                  count: { type: integer }
    post:
      summary: Create a role
      security: [ { DeviceAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                description: { type: string }
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }

  /roles/{id}:
    get:
      summary: Get role by ID
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Role details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    put:
      summary: Update role
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    delete:
      summary: Delete role
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Role deleted

  /role-permissions/{role_id}/{permission_id}:
    post:
      summary: Assign permission to role
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: role_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: permission_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Permission assigned to role
    delete:
      summary: Remove permission from role
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: role_id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - name: permission_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Permission removed from role

  /resources:
    get:
      summary: List resources
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: active
          in: query
          required: false
          schema: { type: boolean }
          description: Filter to show only active resources when set to true
      responses:
        '200':
          description: List of resources
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Resource' }
                  total: { type: integer }
    post:
      summary: Create a resource
      security: [ { DeviceAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type]
              properties:
                name: { type: string }
                type: { type: string }
                location: { type: string }
                department: { type: string }
                active: { type: boolean }
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Resource' }

  /resources/{id}:
    get:
      summary: Get resource by ID
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Resource details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Resource' }
    put:
      summary: Update resource
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                type: { type: string }
                location: { type: string }
                department: { type: string }
                active: { type: boolean }
      responses:
        '200':
          description: Resource updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Resource' }
    delete:
      summary: Delete resource
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Resource deleted

  /permissions:
    get:
      summary: List permissions
      security: [ { DeviceAuth: [] } ]
      responses:
        '200':
          description: List of permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items: { $ref: '#/components/schemas/Permission' }
                  count: { type: integer }
    post:
      summary: Create a permission
      security: [ { DeviceAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [resource_id, action, effect]
              properties:
                resource_id: { type: string, format: uuid }
                action: { type: string }
                effect: { type: string }
      responses:
        '201':
          description: Permission created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Permission' }

  /permissions/{id}:
    get:
      summary: Get permission by ID
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Permission details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Permission' }
    delete:
      summary: Delete permission
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Permission deleted

  /actions:
    get:
      summary: List actions
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: active
          in: query
          required: false
          schema: { type: boolean }
          description: Filter to show only active actions when set to true
      responses:
        '200':
          description: List of actions
          content:
            application/json:
              schema:
                type: object
                properties:
                  actions:
                    type: array
                    items: { $ref: '#/components/schemas/Action' }
                  count: { type: integer }
    post:
      summary: Create an action
      security: [ { DeviceAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, activity_type]
              properties:
                name: { type: string }
                activity_type: 
                  type: string
                  enum: [user, system, automated, other]
                  description: Type of activity this action represents
                required_permissions:
                  type: array
                  items: { type: string }
                  description: Array of permission strings in format "resource:action"
                details:
                  type: object
                  description: JSON object containing additional details about the action
                active: { type: boolean, description: Whether the action is active and can be executed }
      responses:
        '201':
          description: Action created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Action' }

  /actions/{id}:
    get:
      summary: Get action by ID
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Action details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Action' }
    put:
      summary: Update action
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                activity_type: 
                  type: string
                  enum: [user, system, automated, other]
                  description: Type of activity this action represents
                required_permissions:
                  type: array
                  items: { type: string }
                  description: Array of permission strings in format "resource:action"
                details:
                  type: object
                  description: JSON object containing additional details about the action
                active: { type: boolean, description: Whether the action is active and can be executed }
      responses:
        '200':
          description: Action updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Action' }
    delete:
      summary: Delete action
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Action deleted

  /devices:
    get:
      summary: List devices
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: user_id
          in: query
          required: false
          schema: { type: string, format: uuid }
          description: Filter devices by user ID
        - name: active
          in: query
          required: false
          schema: { type: boolean }
          description: Filter to show only active devices when set to true
      responses:
        '200':
          description: List of devices
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Device' }
                  total: { type: integer }
    post:
      summary: Register a device
      security: [ { DeviceAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, type, identifier]
              properties:
                user_id: { type: string, format: uuid }
                type: { type: string }
                identifier: { type: string }
                secret: { type: string }
                active: { type: boolean }
      responses:
        '201':
          description: Device registered
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Device' }

  /devices/{id}:
    get:
      summary: Get device by ID
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Device details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Device' }
    put:
      summary: Update device
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type: { type: string }
                identifier: { type: string }
                secret: { type: string }
                active: { type: boolean }
      responses:
        '200':
          description: Device updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Device' }
    delete:
      summary: Delete device
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Device deleted

  /locations:
    get:
      summary: List locations
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: active
          in: query
          required: false
          schema: { type: boolean }
          description: Filter to show only active locations when set to true
        - name: type
          in: query
          required: false
          schema: { type: string, enum: [office, home, event, other] }
          description: Filter locations by type
      responses:
        '200':
          description: List of locations
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Location' }
                  total: { type: integer }
    post:
      summary: Create a location
      security: [ { DeviceAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                description: { type: string }
                address: { type: string }
                type: { type: string, enum: [office, home, event, other] }
                active: { type: boolean }
      responses:
        '201':
          description: Location created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Location' }

  /locations/{id}:
    get:
      summary: Get location by ID
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Location details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Location' }
    put:
      summary: Update location
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                address: { type: string }
                type: { type: string, enum: [office, home, event, other] }
                active: { type: boolean }
      responses:
        '200':
          description: Location updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Location' }
    delete:
      summary: Delete location (soft delete - marks as inactive)
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Location deleted (marked as inactive)

  /user-statuses:
    get:
      summary: List user statuses
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: active
          in: query
          required: false
          schema: { type: boolean }
          description: Filter to show only active user statuses when set to true
        - name: type
          in: query
          required: false
          schema: { type: string, enum: [working, break, leave, travel, other] }
          description: Filter user statuses by type
      responses:
        '200':
          description: List of user statuses
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/UserStatus' }
                  total: { type: integer }
    post:
      summary: Create a user status
      security: [ { DeviceAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                description: { type: string }
                type: { type: string, enum: [working, break, leave, travel, other] }
                active: { type: boolean }
      responses:
        '201':
          description: User status created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserStatus' }

  /user-statuses/{id}:
    get:
      summary: Get user status by ID
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: User status details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserStatus' }
    put:
      summary: Update user status
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                type: { type: string, enum: [working, break, leave, travel, other] }
                active: { type: boolean }
      responses:
        '200':
          description: User status updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserStatus' }
    delete:
      summary: Delete user status (soft delete - marks as inactive)
      security: [ { DeviceAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: User status deleted (marked as inactive)

  /api/v1/user-activity:
    get:
      summary: List user activity history
      description: List user activity history with optional filters (time, user, location, status, action).
      tags: [UserActivity]
      parameters:
        - in: query
          name: from_datetime
          schema:
            type: string
            format: date-time
          description: Filter activities from this datetime (RFC3339)
        - in: query
          name: to_datetime
          schema:
            type: string
            format: date-time
          description: Filter activities to this datetime (RFC3339)
        - in: query
          name: user_ids
          schema:
            type: string
          description: Comma-separated list of user IDs
        - in: query
          name: location_ids
          schema:
            type: string
          description: Comma-separated list of location IDs
        - in: query
          name: status_ids
          schema:
            type: string
          description: Comma-separated list of status IDs
        - in: query
          name: action_ids
          schema:
            type: string
          description: Comma-separated list of action IDs
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
          description: Maximum number of activities to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of activities to skip
      responses:
        '200':
          description: List of user activity history
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserActivityHistory'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer

  /api/v1/user-activity/summary:
    get:
      summary: Get user activity summary
      description: Get a summary of user activity for attendance reports.
      tags: [UserActivity]
      parameters:
        - in: query
          name: from_datetime
          required: true
          schema:
            type: string
            format: date-time
          description: Start datetime (RFC3339)
        - in: query
          name: to_datetime
          required: true
          schema:
            type: string
            format: date-time
          description: End datetime (RFC3339)
        - in: query
          name: user_ids
          schema:
            type: string
          description: Comma-separated list of user IDs
      responses:
        '200':
          description: User activity summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserActivitySummary'

  /api/v1/user-activity/{user_id}:
    get:
      summary: Get activity for a specific user
      description: Get activity history for a specific user with optional filters.
      tags: [UserActivity]
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: from_datetime
          schema:
            type: string
            format: date-time
        - in: query
          name: to_datetime
          schema:
            type: string
            format: date-time
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of user activity history for the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserActivityHistory'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer

  /api/v1/user-activity/activity/{id}:
    get:
      summary: Get activity by ID
      description: Get a single user activity record by its ID.
      tags: [UserActivity]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User activity record
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserActivityHistory' 